name: Deploy to AWS Lambda

on:
  push:
    branches:
      - master

jobs:
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install dependencies
        run: npm install
      # - name: Run tests with coverage
      #   run: npm run test:coverage
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: sonarcloud
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

    #   - name: Run tests
    #     run: npm test
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS
        if: github.ref == 'refs/heads/master' # Only deploy on main branch
        env:
          IS_OFFLINE: 'false'
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
          SUBNET_ID_1: ${{ secrets.SUBNET_ID_1 }}
          SUBNET_ID_2: ${{ secrets.SUBNET_ID_2 }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          COOKIE_DOMAIN: ${{ vars.COOKIE_DOMAIN }}
          FRONTEND_URL: ${{ vars.FRONTEND_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          npm install -g serverless
          serverless deploy --stage stg --region ${{ secrets.AWS_REGION }}

  zap_scan:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    name: Scan the microservice application
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: master
      - name: ZAP Scan on EventSpark Microservice
        uses: zaproxy/action-baseline@v0.13.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://bqqn2os7e1.execute-api.ap-southeast-1.amazonaws.com/stg'
          cmd_options: '-a'
  